/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Admin
 */

package com.mycompany.Client;

import javax.swing.table.DefaultTableModel;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class PeerTest extends javax.swing.JFrame {

    private DefaultTableModel tableModel;
    private DefaultListModel<String> listModel;
    Peer peer;
    InputDialog inputDialog;

    /**
     * Creates new form Client
     */
    public PeerTest() {
        initComponents();
        String currentDirectory = System.getProperty("user.dir");
        txtLocalPath.setText(currentDirectory);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listSharedFiles = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtLocalPath = new javax.swing.JTextField();
        btnChangeLocalPath = new javax.swing.JButton();
        btnPublish = new javax.swing.JButton();
        btnFetch = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtUploadPort = new javax.swing.JTextField();
        btnDisconnect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Shared Files"));

        listSharedFiles.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(listSharedFiles);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Local path");

        btnChangeLocalPath.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnChangeLocalPath.setText("Change");
        btnChangeLocalPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeLocalPathActionPerformed(evt);
            }
        });

        btnPublish.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnPublish.setText("Publish");
        btnPublish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPublishActionPerformed(evt);
            }
        });

        btnFetch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnFetch.setText("Fetch");
        btnFetch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFetchActionPerformed(evt);
            }
        });

        btnConnect.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Upload port");

        txtUploadPort.setText("1024");
        txtUploadPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUploadPortActionPerformed(evt);
            }
        });

        btnDisconnect.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDisconnect.setText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUploadPort, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(btnPublish)
                                .addGap(31, 31, 31)
                                .addComponent(btnFetch)
                                .addGap(33, 33, 33)
                                .addComponent(btnConnect)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDisconnect))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txtLocalPath, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnChangeLocalPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtLocalPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChangeLocalPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUploadPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPublish)
                    .addComponent(btnFetch)
                    .addComponent(btnConnect)
                    .addComponent(btnDisconnect))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChangeLocalPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeLocalPathActionPerformed
        // TODO add your handling code here:
        // Open a folder chooser dialog
        JFileChooser folderChooser = new JFileChooser();
        folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int result = folderChooser.showDialog(this, "Select a folder");
        if (result == JFileChooser.APPROVE_OPTION) {
            // Get the selected folder path
            File selectedFolder = folderChooser.getSelectedFile();
            String folderPath = selectedFolder.getAbsolutePath();

            // Set the folder path in the text field
            txtLocalPath.setText(folderPath);
        }
        if (peer != null) {
            peer.setLocalPath(txtLocalPath.getText());
        }

    }//GEN-LAST:event_btnChangeLocalPathActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        // TODO add your handling code here:
        int uploadPort = Integer.parseInt(txtUploadPort.getText());
        if (uploadPort < 0 || uploadPort > 65535) {
            JOptionPane.showMessageDialog(null, "The port number must have a value from 0 to 65535!");
            return;
        }
        if (this.peer != null) {
            this.peer.setOnl(true);
            this.setTitle("Client with ID: " + this.peer.getId());
            JOptionPane.showMessageDialog(null, "Reconnected successfully");
            return;
        }
        this.peer = new Peer(uploadPort, txtLocalPath.getText());
        this.peer.startPeer();
        if (!this.peer.getId().isEmpty()) {
            this.setTitle("Client with ID: " + this.peer.getId());
            JOptionPane.showMessageDialog(null, "Connected successfully. Your id is " + peer.getId());
        } else {
            this.peer = null;
            JOptionPane.showMessageDialog(null, "Server not found");
        }

    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnPublishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPublishActionPerformed
        // TODO add your handling code here:
        if ( (this.peer == null) || (!this.peer.isOnl()) ) {
            JOptionPane.showMessageDialog(null, "You have not connected to the server");
            return;
        }
        String lname = "";
        
        inputDialog = new InputDialog(this, true, this.peer, lname, "Publish");
        inputDialog.setVisible(true);
    }//GEN-LAST:event_btnPublishActionPerformed

    private void btnFetchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFetchActionPerformed
        // TODO add your handling code here:
        if ( (this.peer == null) || (!this.peer.isOnl()) ) {
            JOptionPane.showMessageDialog(null, "You have not connected to the server");
            return;
        }
        inputDialog = new InputDialog(this, true, this.peer, "", "Fetch");
        inputDialog.setVisible(true);
    }//GEN-LAST:event_btnFetchActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        // TODO add your handling code here:
        if ( (this.peer == null) || (!this.peer.isOnl()) ) {
            JOptionPane.showMessageDialog(null, "You have not connected to the server");
            return;
        }
        this.peer.setOnl(false);
        JOptionPane.showMessageDialog(null, "You have disconnected to the server");
        this.setTitle("Client - disconnected");
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void txtUploadPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUploadPortActionPerformed
        // TODO add your handling code here:
        try {
            int uploadPort = Integer.parseInt(txtUploadPort.getText());
            if ( 0 <= uploadPort && uploadPort <= 65535) {
                if (this.peer != null) {
                    this.peer.setUploadPort(uploadPort);
                    System.out.println(this.peer.getUploadPort());
                    JOptionPane.showMessageDialog(null, "Successfully updated the port number");
                }
                return;
            }
            JOptionPane.showMessageDialog(null, "The port number must have a value from 0 to 65535!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid port number.");
        }
    }//GEN-LAST:event_txtUploadPortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PeerTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PeerTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PeerTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PeerTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PeerTest().setVisible(true);
            }
        });
    }

    public void addFilesToList(String fileName) {
        DefaultListModel listModel = (DefaultListModel) listSharedFiles.getModel();
        if (!listModel.contains(fileName)) {
            listModel.addElement(fileName);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeLocalPath;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnFetch;
    private javax.swing.JButton btnPublish;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listSharedFiles;
    private javax.swing.JTextField txtLocalPath;
    private javax.swing.JTextField txtUploadPort;
    // End of variables declaration//GEN-END:variables
}
